sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
dim(cgss2015) #看数据结构
#View(cgss2015[(1:10),])
########数据清理 （参考李丁 ）
cgss2015[cgss2015<=-1] <- NA
cgss2015[cgss2015=="无填答/拒绝回答"] <- NA
cgss2015[cgss2015=="不知道"] <- NA
cgss2015[cgss2015=="不适用"] <- NA
cgss2015[cgss2015=="无法回答"] <- NA
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
dim(cgss2015) #看数据结构
#View(cgss2015[(1:10),])
########数据清理 （参考李丁 ）
cgss2015[cgss2015<=-1] <- NA
#cgss2015[cgss2015=="无填答/拒绝回答"] <- NA
#cgss2015[cgss2015=="不知道"] <- NA
#cgss2015[cgss2015=="不适用"] <- NA
#cgss2015[cgss2015=="无法回答"] <- NA
cgss2015 <- sjlabelled::drop_labels(cgss2015)
#str(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
cgss <- droplevels(cgss2015)
#######形成新的数据
newcgss <- subset(cgss, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
dim(newcgss)
View(newcgss) #看结果
#s1城乡  a62家庭收入  a8b（工作收入） a13(身高）a14（体重）a301(出生年）
#a36(幸福感）a15(健康）a10(政治面貌）a7a(教育） a2(性别）
names(newcgss)
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
#数值型变量
summary(newcgss$salary)
library(psych)
describe(newcgss$salary,skew=FALSE)
#分类变量
counts <- table(newcgss$sex)
counts
sjp.frq(newcgss$sex)
sjp.frq(newcgss$stype)
sjPlot::sjp.setTheme(theme.font ='STXihei' )
sjt.frq(newcgss$happy,encoding= "UTF-8")
########此时 前面的变量正常，但是stackfre开始报错，无法运行
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
#View(cgss2015)
newcgss <- subset(cgss2015, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
newcgss <- sjlabelled::drop_labels(newcgss)
sjt.frq(newcgss$happy,encoding= "UTF-8")
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
?sjPlot
sjPlot::sjPlot-themes(theme.font ='STXihei' )
sjPlot::theme_sjplot(base_font ='STXihei' )
sjPlot::theme_sjplot(base_family ='STXihei' )
sjPlot::set_theme(base_family ='STXihei' )
sjPlot::set_theme(theme.font ='STXihei' )
cgss2003 %>%
select(sitetype) %>% sjPlot::sjplot(fun="frq")
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
dim(cgss2015) #看数据结构
#View(cgss2015[(1:10),])
########数据清理 （参考李丁 ）
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
cgss <- droplevels(cgss2015)
newcgss <- subset(cgss, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
dim(newcgss)
names(newcgss)
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
summary(newcgss$salary)
library(psych)
describe(newcgss$salary,skew=FALSE)
counts <- table(newcgss$sex)
counts
sjp.frq(newcgss$sex)
sjp.frq(newcgss$stype)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
#View(cgss2015)
newcgss <- subset(cgss2015, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
newcgss <- sjlabelled::drop_labels(newcgss)
sjt.frq(newcgss$happy,encoding= "UTF-8")
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
dim(cgss2015) #看数据结构
#View(cgss2015[(1:10),])
########数据清理 （参考李丁 ）
cgss2015[cgss2015<=-1] <- NA
#cgss2015 <- droplevels(cgss2015)
#cgss2015[cgss2015=="无填答/拒绝回答"] <- NA
#cgss2015[cgss2015=="不知道"] <- NA
#cgss2015[cgss2015=="不适用"] <- NA
#cgss2015[cgss2015=="无法回答"] <- NA
cgss2015 <- sjlabelled::drop_labels(cgss2015)
#str(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
#cgss <- droplevels(cgss2015)
#######形成新的数据
newcgss <- subset(cgss, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
dim(newcgss)
#View(newcgss) #看结果
#s1城乡  a62家庭收入  a8b（工作收入） a13(身高）a14（体重）a301(出生年）
#a36(幸福感）a15(健康）a10(政治面貌）a7a(教育） a2(性别）
names(newcgss)
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
dim(cgss2015) #看数据结构
#View(cgss2015[(1:10),])
########数据清理 （参考李丁 ）
cgss2015[cgss2015<=-1] <- NA
#cgss2015 <- droplevels(cgss2015)
#cgss2015[cgss2015=="无填答/拒绝回答"] <- NA
#cgss2015[cgss2015=="不知道"] <- NA
#cgss2015[cgss2015=="不适用"] <- NA
#cgss2015[cgss2015=="无法回答"] <- NA
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- dropl1evels(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- drop1evels(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
#cgss2015 <- drop1evels(cgss2015)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
#cgss2015 <- drop1evels(cgss2015)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
#cgss2015 <- drop1evels(cgss2015)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
sjt.stackfrq(cgss2015[, start end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
sjt.stackfrq(cgss2015[, c(start, end)],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- drop1evels(cgss2015)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
cgss2015 <- sjmisc::to_label(cgss2015)
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
View(cgss2015)
newcgss <- subset(cgss2015, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
newcgss <- sjlabelled::drop_labels(newcgss)
sjt.frq(newcgss$happy,encoding= "UTF-8")
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
w <- which(sapply(cgss2015, class) == 'labelled')
cgss2015[w] <- lapply(cgss2015[w],
function(x) as.numeric(as.character(x)))
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
#View(cgss2015)
newcgss <- subset(cgss2015, select = c(s1,a301,a62,a8b,a13,a14,a36,a15,a10,a7a,a2))
names(newcgss)[1:11] <- c("stype","birth","fin", "salary", "height", "weight","happy","health","poli","educ","sex")
newcgss <- sjlabelled::drop_labels(newcgss)
sjt.frq(newcgss$happy,encoding= "UTF-8")
start <- which(colnames(cgss2015) == "b151")
# receive last item of COPE-index scale
end <- which(colnames(cgss2015) == "b159")
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- read_dta("/Users/liding/DATA/CGSS/2015/2015cgss20160803.dta")
cgss2015[cgss2015<=-1] <- NA
cgss2015 <- droplevels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
cgss2015 <- sjlabelled::drop_labels(cgss2015)
sjt.stackfrq(cgss2015[, start:end],encoding= "UTF-8" ,altr.row.col = TRUE,show.n=FALSE)
2017-72
17*6.6
1300000000*0.5
1300000000*0.05
130000*0.05
488+580+299+299+381.6+100
1268/16411
8547/1268
3900/2170
2200/1400/(3800/8547)
2200/2921/(3800/8547)
130*2500
library(readxl)
pppop <- read_excel("~/E/研究/农村研究/三村调查/固原调查材料/官方户籍统计信息/2011年5月河东村户籍信息.xls")
names(pppop) <- c("lid","vname","id","name","gender","eth","bob","add","edu")
pppop$yob <- as.numeric(substr(pppop$bob,1,4))
library(tidyverse)
head(pppop)
pppop %>%
sjPlot::sjtab(yob,eth,fun="xtab")
pppop %>% filter(eth=="汉"|eth=="回") %>%
sjPlot::sjtab(yob,eth,fun="xtab")
pppop %>%
sjPlot::sjtab(yob,gender,fun="xtab")
pppop %>% filter(eth=="汉"|eth=="回") %>%
sjPlot::sjtab(yob,eth,gender,fun="xtab")
library(rattle)
library(rattle)
library(rattle)
library(maptools)
setwd("//Users/liding/E/Bdata/Course/2R/analysis/example/ch17/")
# 载入空间数据并转化成数据框
china_shp <- readShapePoly("bou2_4p.shp")
china_map <- fortify(china_shp)
library(ggplot2)
china_map <- fortify(china_shp)
p <- ggplot(china_map, aes(x = long, y = lat, group = group)) +
geom_path() +
labs(title = "China Map")
p + theme_clean()
??theme_clean()
library(ggthemes)
p + theme_clean()
library(maps) # 为了获取数据
library(plyr) # 加载数据清洗软件包
theme_clean <- function(base_size=12){
require(grid)
theme_grey(base_size)
theme(
axis.title = element_blank(),
axis.text = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
axis.ticks.length = unit(0, "cm"),
axis.ticks.margin = unit(0, "cm"),
panel.margin = unit(0, "lines"),
plot.margin = unit(c(0,0,0,0), "lines"),
complete = TRUE
)
}
p + theme_clean()
p + theme_clean()
p
mpg
devtools::install_github("kosukeimai/qss-package", build_vignettes = TRUE)
city  <- c('beijing','shanghai','chengdu','shanghai','beijing')
age <- c(23,43,51,32,60)
gender <- c('F','M','F','F','M')
people <- data.frame(city,age,gender)
people
setwd("/Users/liding/E/Bdata/liding17/2018R/data")
write.csv(people,people.csv)
write.csv(people,"people.csv")
write.csv(people,"people.csv",row.names=FALSE)
people <- read.csv("/Users/liding/E/Bdata/liding17/2018R/data/people.csv")
people
people <- read.csv("/Users/liding/E/Bdata/liding17/2018R/data/people.csv")
kable(people)
knitr::kable(people)
people$age
people[,1]
people[,2]
people[, 'age']
people$age>30
people[people$age>30]
people[people$age>30,]
people[1:2,2]
people[1:2,2:3]
people[, c('age','gender')]
people[,2:3]
people$age
people[1:2,]
people[people$age>30,1]
str(data)
str(people)
str(data)
data <- data.frame(city,age,gender,stringsAsFactors=F)
str(data)
data$gender <- as.factor(data$gender)
str(data)
ave <- mean(data$age) # 注意 ave为 data之外的东西
data[data$age>ave, ]
order(data$age)
data[order(data$age),]
data[order(data$age,decreasing=T),][1:2, ]
rm(city age gender people)
rm(c("city", "age", "gender" ,"people"))
rm("city", "age", "gender" ,"people")
city  <- c('beijing','shanghai','chengdu','shanghai','beijing')
age <- c(23,43,51,32,60)
gender <- c('F','M','F','F','M')
people <- data.frame(city,age,gender)
rm("city", "age", "gender" ,"people")
print(people)
city  <- c('beijing','shanghai','chengdu','shanghai','beijing')
age <- c(23,43,51,32,60)
gender <- c('F','M','F','F','M')
people <- data.frame(city,age,gender)
rm("city", "age", "gender" )
print(people)
data <- data.frame(city,temp)
data <- read.csv("/Users/liding/E/Bdata/liding17/2018R/data/people.csv")
summary(data)
dim(data)
head(data)
str(data)
people$age
people[,2]   # 等价于 people[, 'age']
people[,2:3] # 等价于people[, c('age','gender')]
people[1:2,] # 头两行
people$age>30 # 判断每个age是否大于30
people[people$age>30,] # age大于30的行
people$city[people$age>30] # age大于30的city,等价于下一行
people[people$age>30,1]
order(data$age)
data[order(data$age),]
data[order(data$age,decreasing=T),][1:2, ]
data$ave <- mean(data$age)
data[data$age>data$ave]
data[data$age>data$ave,]
city  <- c('beijing','shanghai','chengdu','shanghai','beijing')
age <- c(23,43,51,32,60)
gender <- c('F','M','F','F','M')
attach(data)
detach(data)
age[1] <- 27
attach(data)
detach(data)
data
ls()
myfunc <- function(r) {
area <- pi*r^2
return(area)
}
print(myfunc(4))
x <- c(1,2,3,4)
log(x)
x[2] # 第二个元素
x[2:4] # 第2到4个元素
x[-4] # 减去第4个元素后
x[x>2] # 大于2的元素
fibonaci <- function(n) {
i <- 2
x <- 1:2
while (x[i] < n) {
x[i+1] <- x[i-1] + x[i]
i <- i + 1
}
x <- x[-i]
return(x)
}
SeqFi <- fibonaci(100)
vector1 <- vector2 <- vector3 <- rnorm(3)
my_matrix <- cbind(vector1,vector2,vector3)
ifelse(my_matrix>0,1,0)
vector1 <- vector2 <- vector3 <- rnorm(0)
my_matrix <- cbind(vector1,vector2,vector3)
ifelse(my_matrix>0,1,0)
vector1 <- vector2 <- vector3 <- rnorm(3)
my_matrix <- cbind(vector1,vector2,vector3)
ifelse(my_matrix>0,1,0)
vector1 <- vector2 <- vector3 <- rnorm(3) # rnorm(n, mean = 0, sd = 1)
my_matrix <- cbind(vector1,vector2,vector3)
my_matrix
ifelse(my_matrix>0,1,0)
?matrix
vector4 <- rnorm(8)
vector4
matrix(vector4,nrow=2,ncol = 4, byrow = TRUE)
vector4 <- rnorm(8)
vector4
matrix(vector4,nrow=2,ncol = 4, byrow = FALSE)
vector1 <- vector2 <- vector3 <- rnorm(3) # rnorm(n, mean = 0, sd = 1)
my_matrix <- cbind(vector1,vector2,vector3)
my_matrix
ifelse(my_matrix>0,1,0)
a <- array(1:12,dim=c(3,4))
print(a)
a <- array(1:12,dim=c(2,3,2))
print(a)
str(a)
a[2,2,2]
a[2,1,1]
a[2,1]
a[2,1,]
dim(a)
data_list = list(age=age,city=city,gender=gender)
print(data_list)
data_list$mat <- my_mat
data_list$mat <- my_matrix # 矩阵
data_list$data <- data # + 数据
names(data_list)
data_list$data
length(data_list)
data_list[[4]]
str(data_list)
vector <- 1:12
dim(vector) <- c(4,3)
print(vector)
vec4 <- c(4.6, 4.8, 5.2, 6.3, 6.8, 7.1, 7.2, 7.4, 7.5, 8.6, NA)
sum(vec4)
library(readr)
bike <- read_delim("./data/nc_bike_crash.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
bike <- read_delim("../data/nc_bike_crash.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
class(bike)
cred <- read.spss("../xample final/credit_card.sav",to.data.frame =TRUE)
library(foreign)
cred <- read.spss("../xample final/credit_card.sav",to.data.frame =TRUE)
?recode
ackageVersion("Matrix")
packageVersion("Matrix")
devtools::install_version("Matrix", version = "1.2.10", repos = "http://cran.us.r-project.org")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/Matrix/Matrix_1.2-10.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
